
// Verilog netlist produced by program ldbanno, Version Diamond (64-bit) 2.1.0.103

// ldbanno -n Verilog -o eece444_video_card_eece444_video_card_mapvo.vo -w -neg eece444_video_card_eece444_video_card_map.ncd 
// Netlist created on Wed Mar 27 22:59:19 2013
// Netlist written on Wed Mar 27 22:59:20 2013
// Design is for device LCMXO2280C
// Design is for package FTBGA256
// Design is for performance grade 3

`timescale 1 ns / 1 ps

module Top ( RESET, H_SYNC, V_SYNC, RED );
  input  RESET;
  output H_SYNC, V_SYNC, RED;
  wire   \CNTRL/h_counter_1 , \CNTRL/h_counter_0 , n8, osc_clk, \CNTRL/n119 , 
         h_counter_9, h_counter_8, \CNTRL/n122 , \CNTRL/n123 , h_counter_7, 
         h_counter_6, \CNTRL/n121 , h_counter_5, \CNTRL/h_counter_4 , 
         \CNTRL/n120 , \CNTRL/h_counter_3 , \CNTRL/h_counter_2 , h_counter_10, 
         n4, n128, RESET_c, \CNTRL/n6 , \CNTRL/n125 , \CNTRL/n6_adj_1 , 
         H_SYNC_c, VCC_net, VCCI, GNDI_TSALL;

  CNTRL_SLICE_0 \CNTRL/SLICE_0 ( .A1(\CNTRL/h_counter_1 ), 
    .A0(\CNTRL/h_counter_0 ), .LSR(n8), .CLK(osc_clk), 
    .Q0(\CNTRL/h_counter_0 ), .Q1(\CNTRL/h_counter_1 ), .FCO(\CNTRL/n119 ));
  CNTRL_SLICE_1 \CNTRL/SLICE_1 ( .A1(h_counter_9), .A0(h_counter_8), .LSR(n8), 
    .CLK(osc_clk), .FCI(\CNTRL/n122 ), .Q0(h_counter_8), .Q1(h_counter_9), 
    .FCO(\CNTRL/n123 ));
  CNTRL_SLICE_2 \CNTRL/SLICE_2 ( .A1(h_counter_7), .A0(h_counter_6), .LSR(n8), 
    .CLK(osc_clk), .FCI(\CNTRL/n121 ), .Q0(h_counter_6), .Q1(h_counter_7), 
    .FCO(\CNTRL/n122 ));
  CNTRL_SLICE_3 \CNTRL/SLICE_3 ( .A1(h_counter_5), .A0(\CNTRL/h_counter_4 ), 
    .LSR(n8), .CLK(osc_clk), .FCI(\CNTRL/n120 ), .Q0(\CNTRL/h_counter_4 ), 
    .Q1(h_counter_5), .FCO(\CNTRL/n121 ));
  CNTRL_SLICE_4 \CNTRL/SLICE_4 ( .A1(\CNTRL/h_counter_3 ), 
    .A0(\CNTRL/h_counter_2 ), .LSR(n8), .CLK(osc_clk), .FCI(\CNTRL/n119 ), 
    .Q0(\CNTRL/h_counter_2 ), .Q1(\CNTRL/h_counter_3 ), .FCO(\CNTRL/n120 ));
  CNTRL_SLICE_5 \CNTRL/SLICE_5 ( .A0(h_counter_10), .LSR(n8), .CLK(osc_clk), 
    .FCI(\CNTRL/n123 ), .Q0(h_counter_10));
  SLICE_6 SLICE_6( .D1(n4), .C1(n128), .B1(RESET_c), .A1(h_counter_10), 
    .C0(h_counter_7), .B0(h_counter_5), .A0(h_counter_6), .F0(n128), .F1(n8));
  CNTRL_SLICE_7 \CNTRL/SLICE_7 ( .D1(\CNTRL/n6 ), .C1(\CNTRL/h_counter_4 ), 
    .B1(\CNTRL/h_counter_2 ), .A1(\CNTRL/h_counter_3 ), 
    .B0(\CNTRL/h_counter_1 ), .A0(\CNTRL/h_counter_0 ), .F0(\CNTRL/n6 ), 
    .F1(\CNTRL/n125 ));
  CNTRL_SLICE_8 \CNTRL/SLICE_8 ( .D1(\CNTRL/n125 ), .C1(h_counter_5), 
    .B1(h_counter_7), .A1(h_counter_6), .D0(\CNTRL/n6_adj_1 ), 
    .C0(h_counter_10), .B0(h_counter_8), .A0(h_counter_9), .F0(H_SYNC_c), 
    .F1(\CNTRL/n6_adj_1 ));
  SLICE_9 SLICE_9( .B0(h_counter_9), .A0(h_counter_8), .F0(n4), .F1(VCC_net));
  V_SYNC V_SYNC_I( .V_SYNC(V_SYNC));
  H_SYNC H_SYNC_I( .PADDO(H_SYNC_c), .H_SYNC(H_SYNC));
  RED RED_I( .PADDO(VCC_net), .RED(RED));
  RESET RESET_I( .PADDI(RESET_c), .RESET(RESET));
  OSCC_1 OSCC_1( .CFGCLK(osc_clk));
  VHI VHI_INST( .Z(VCCI));
  PUR PUR_INST( .PUR(VCC_net));
  GSR GSR_INST( .GSR(VCCI));
  VLO VLO_INST( .Z(GNDI_TSALL));
  TSALL TSALL_INST( .TSALL(GNDI_TSALL));
endmodule

module CNTRL_SLICE_0 ( input A1, A0, LSR, CLK, output Q0, Q1, FCO );
  wire   VCCI, \CNTRL/SLICE_0/CNTRL/h_counter_8_add_4_2_S1 , 
         \CNTRL/SLICE_0/CNTRL/h_counter_8_add_4_2_S0 , GNDI, A1_dly, CLK_dly, 
         A0_dly, LSR_dly;

  vmuxregsre \CNTRL/h_counter_8__i1 ( .D0(VCCI), 
    .D1(\CNTRL/SLICE_0/CNTRL/h_counter_8_add_4_2_S1 ), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \CNTRL/h_counter_8__i0 ( .D0(VCCI), 
    .D1(\CNTRL/SLICE_0/CNTRL/h_counter_8_add_4_2_S0 ), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu2 \CNTRL/h_counter_8_add_4_2 ( .A0(A0_dly), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1_dly), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(\CNTRL/SLICE_0/CNTRL/h_counter_8_add_4_2_S0 ), 
    .S1(\CNTRL/SLICE_0/CNTRL/h_counter_8_add_4_2_S1 ), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, A1, 0:0:0, 0:0:0,,,, CLK_dly, A1_dly);
    $setuphold (posedge CLK, A0, 0:0:0, 0:0:0,,,, CLK_dly, A0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
  endspecify

endmodule

module vmuxregsre ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3IY INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module vcc ( output PWR1 );

  VHI INST1( .Z(PWR1));
endmodule

module ccu2 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO0, 
    CO1 );

  CCU2 inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT0(CO0), .COUT1(CO1));
  defparam inst1.INIT0 = 16'h0555;
  defparam inst1.INIT1 = 16'hfaaa;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module gnd ( output PWR0 );

  VLO INST1( .Z(PWR0));
endmodule

module CNTRL_SLICE_1 ( input A1, A0, LSR, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, \CNTRL/SLICE_1/CNTRL/h_counter_8_add_4_10_S1 , 
         \CNTRL/SLICE_1/CNTRL/h_counter_8_add_4_10_S0 , GNDI, A1_dly, CLK_dly, 
         A0_dly, LSR_dly, FCI_dly;

  vmuxregsre \CNTRL/h_counter_8__i9 ( .D0(VCCI), 
    .D1(\CNTRL/SLICE_1/CNTRL/h_counter_8_add_4_10_S1 ), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \CNTRL/h_counter_8__i8 ( .D0(VCCI), 
    .D1(\CNTRL/SLICE_1/CNTRL/h_counter_8_add_4_10_S0 ), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20001 \CNTRL/h_counter_8_add_4_10 ( .A0(A0_dly), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1_dly), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI_dly), 
    .S0(\CNTRL/SLICE_1/CNTRL/h_counter_8_add_4_10_S0 ), 
    .S1(\CNTRL/SLICE_1/CNTRL/h_counter_8_add_4_10_S1 ), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, A1, 0:0:0, 0:0:0,,,, CLK_dly, A1_dly);
    $setuphold (posedge CLK, A0, 0:0:0, 0:0:0,,,, CLK_dly, A0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $setuphold (posedge CLK, FCI, 0:0:0, 0:0:0,,,, CLK_dly, FCI_dly);
  endspecify

endmodule

module ccu20001 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO0, 
    CO1 );

  CCU2 inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT0(CO0), .COUT1(CO1));
  defparam inst1.INIT0 = 16'hfaaa;
  defparam inst1.INIT1 = 16'hfaaa;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module CNTRL_SLICE_2 ( input A1, A0, LSR, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, \CNTRL/SLICE_2/CNTRL/h_counter_8_add_4_8_S1 , 
         \CNTRL/SLICE_2/CNTRL/h_counter_8_add_4_8_S0 , GNDI, A1_dly, CLK_dly, 
         A0_dly, LSR_dly, FCI_dly;

  vmuxregsre \CNTRL/h_counter_8__i7 ( .D0(VCCI), 
    .D1(\CNTRL/SLICE_2/CNTRL/h_counter_8_add_4_8_S1 ), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \CNTRL/h_counter_8__i6 ( .D0(VCCI), 
    .D1(\CNTRL/SLICE_2/CNTRL/h_counter_8_add_4_8_S0 ), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20001 \CNTRL/h_counter_8_add_4_8 ( .A0(A0_dly), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1_dly), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI_dly), 
    .S0(\CNTRL/SLICE_2/CNTRL/h_counter_8_add_4_8_S0 ), 
    .S1(\CNTRL/SLICE_2/CNTRL/h_counter_8_add_4_8_S1 ), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, A1, 0:0:0, 0:0:0,,,, CLK_dly, A1_dly);
    $setuphold (posedge CLK, A0, 0:0:0, 0:0:0,,,, CLK_dly, A0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $setuphold (posedge CLK, FCI, 0:0:0, 0:0:0,,,, CLK_dly, FCI_dly);
  endspecify

endmodule

module CNTRL_SLICE_3 ( input A1, A0, LSR, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, \CNTRL/SLICE_3/CNTRL/h_counter_8_add_4_6_S1 , 
         \CNTRL/SLICE_3/CNTRL/h_counter_8_add_4_6_S0 , GNDI, A1_dly, CLK_dly, 
         A0_dly, LSR_dly, FCI_dly;

  vmuxregsre \CNTRL/h_counter_8__i5 ( .D0(VCCI), 
    .D1(\CNTRL/SLICE_3/CNTRL/h_counter_8_add_4_6_S1 ), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \CNTRL/h_counter_8__i4 ( .D0(VCCI), 
    .D1(\CNTRL/SLICE_3/CNTRL/h_counter_8_add_4_6_S0 ), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20001 \CNTRL/h_counter_8_add_4_6 ( .A0(A0_dly), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1_dly), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI_dly), 
    .S0(\CNTRL/SLICE_3/CNTRL/h_counter_8_add_4_6_S0 ), 
    .S1(\CNTRL/SLICE_3/CNTRL/h_counter_8_add_4_6_S1 ), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, A1, 0:0:0, 0:0:0,,,, CLK_dly, A1_dly);
    $setuphold (posedge CLK, A0, 0:0:0, 0:0:0,,,, CLK_dly, A0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $setuphold (posedge CLK, FCI, 0:0:0, 0:0:0,,,, CLK_dly, FCI_dly);
  endspecify

endmodule

module CNTRL_SLICE_4 ( input A1, A0, LSR, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, \CNTRL/SLICE_4/CNTRL/h_counter_8_add_4_4_S1 , 
         \CNTRL/SLICE_4/CNTRL/h_counter_8_add_4_4_S0 , GNDI, A1_dly, CLK_dly, 
         A0_dly, LSR_dly, FCI_dly;

  vmuxregsre \CNTRL/h_counter_8__i3 ( .D0(VCCI), 
    .D1(\CNTRL/SLICE_4/CNTRL/h_counter_8_add_4_4_S1 ), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \CNTRL/h_counter_8__i2 ( .D0(VCCI), 
    .D1(\CNTRL/SLICE_4/CNTRL/h_counter_8_add_4_4_S0 ), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20001 \CNTRL/h_counter_8_add_4_4 ( .A0(A0_dly), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1_dly), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI_dly), 
    .S0(\CNTRL/SLICE_4/CNTRL/h_counter_8_add_4_4_S0 ), 
    .S1(\CNTRL/SLICE_4/CNTRL/h_counter_8_add_4_4_S1 ), .CO0(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, A1, 0:0:0, 0:0:0,,,, CLK_dly, A1_dly);
    $setuphold (posedge CLK, A0, 0:0:0, 0:0:0,,,, CLK_dly, A0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $setuphold (posedge CLK, FCI, 0:0:0, 0:0:0,,,, CLK_dly, FCI_dly);
  endspecify

endmodule

module CNTRL_SLICE_5 ( input A0, LSR, CLK, FCI, output Q0 );
  wire   VCCI, \CNTRL/SLICE_5/CNTRL/h_counter_8_add_4_12_S0 , GNDI, A0_dly, 
         CLK_dly, LSR_dly, FCI_dly;

  vmuxregsre \CNTRL/h_counter_8__i10 ( .D0(VCCI), 
    .D1(\CNTRL/SLICE_5/CNTRL/h_counter_8_add_4_12_S0 ), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20002 \CNTRL/h_counter_8_add_4_12 ( .A0(A0_dly), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI_dly), 
    .S0(\CNTRL/SLICE_5/CNTRL/h_counter_8_add_4_12_S0 ), .S1(), .CO0(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, A0, 0:0:0, 0:0:0,,,, CLK_dly, A0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $setuphold (posedge CLK, FCI, 0:0:0, 0:0:0,,,, CLK_dly, FCI_dly);
  endspecify

endmodule

module ccu20002 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO0, 
    CO1 );

  CCU2 inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT0(CO0), .COUT1(CO1));
  defparam inst1.INIT0 = 16'hfaaa;
  defparam inst1.INIT1 = 16'h0000;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_6 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut4 i1_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40003 i2_3_lut( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut4 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hFBBB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40003 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hFEFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module CNTRL_SLICE_7 ( input D1, C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40004 \CNTRL/i4_4_lut_adj_1 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40005 \CNTRL/i1_2_lut ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40004 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h8000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40005 ( input A, B, C, D, output Z );

  ROM16X1 #(16'h8888) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module CNTRL_SLICE_8 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40006 \CNTRL/i1_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40007 \CNTRL/i4_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40006 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hEEEC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40007 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_9 ( input B0, A0, output F0, F1 );
  wire   GNDI;

  lut40008 i129( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40005 i1_2_lut( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40008 ( input A, B, C, D, output Z );

  ROM16X1 #(16'hFFFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module V_SYNC ( output V_SYNC );
  wire   GNDI, VCCI;

  mjeiobuf V_SYNC_pad( .I(GNDI), .T(VCCI), .PAD(V_SYNC));
  gnd DRIVEGND( .PWR0(GNDI));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
  endspecify

endmodule

module mjeiobuf ( input I, T, output PAD );

  OBZPU INST5( .I(I), .T(T), .O(PAD));
endmodule

module H_SYNC ( input PADDO, output H_SYNC );
  wire   GNDI;

  mjeiobuf0009 H_SYNC_pad( .I(PADDO), .T(GNDI), .PAD(H_SYNC));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => H_SYNC) = (0:0:0,0:0:0);
  endspecify

endmodule

module mjeiobuf0009 ( input I, T, output PAD );

  OBZPU INST5( .I(I), .T(T), .O(PAD));
endmodule

module RED ( input PADDO, output RED );
  wire   GNDI;

  mjeiobuf0009 RED_pad( .I(PADDO), .T(GNDI), .PAD(RED));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => RED) = (0:0:0,0:0:0);
  endspecify

endmodule

module RESET ( output PADDI, input RESET );

  mjeiobuf0010 RESET_pad( .Z(PADDI), .PAD(RESET));

  specify
    (RESET => PADDI) = (0:0:0,0:0:0);
    $width (posedge RESET, 0:0:0);
    $width (negedge RESET, 0:0:0);
  endspecify

endmodule

module mjeiobuf0010 ( output Z, input PAD );

  IBPU INST1( .I(PAD), .O(Z));
endmodule

module OSCC_1 ( output CFGCLK );

  OSCC_B OSCC_1_OSCC( .OSC(CFGCLK));
endmodule

module OSCC_B ( output OSC );

  OSCC INST10( .OSC(OSC));
endmodule
